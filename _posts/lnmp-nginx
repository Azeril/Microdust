web服务的搭建
1.nginx介绍
        nginx是俄罗斯人开发的一个开源，支持高性能、高并发www服务和代理服务软件。一共780K，C语言开发的。
        nginx因具有高并发（特别是静态资源）、占用系统资源少等特性，且功能丰富而逐渐流行起来。可以运行在unix、linux、BSD、mMac OS X、Solaris以及Microsoft windows等操作系统中。当前流行的nginx web组合被称为LNMP或LEMP。
        nginx本身是一款静态的（html，js，css，jpg等）www软件，不能解析动态的PHP，JSP，DO。
        nginx具有功能：
                优秀的web服务软件
                反向代理负载均衡f功能（类似LVS负载均衡及Haproxy等专业代理软件，但nginx更简单、方便）
                缓存服务功能
Nginx的重要特性及应用场景
        nginx具备的基础特性：
                可针对静态资源高速高并发访问机缓存。
                可使用反向代理加速，并且可惊醒数据缓存。
                具有简单负载均衡、节点健康检查和容错功能。
                支持远程FastCGI服务的缓存加速。
                支持FastCGI、Uwsgi、SCGI、Memcached Servers的加速和缓存。
                支持SSL、TLS、SNI。
                具有模块化的架构：过滤器包括gzip压缩、ranges支持、chunked响应、XSLT、SSI及图像缩放等功能。再SSI过滤器中，一个包含多个SSI的页面，如果精油FastCGI或反向代理处理，可被并行处理。
        其他特点：
                配置简单，灵活，轻量。
                高并发（静态小文件），静态几万的并发。
                占用资源较少。2W并发，开10个线程服务，内存消耗几百M多。
                功能中内较多（web，cache，proxy），每一个功能都不是特别强。
                支持epoll模型。是的nginx可以支持高并发。（apache使用select模型）
                nginx可以配个动态PHP服务（fastCGI接口）。
                利用nginx可以对IP限速，可以限制连接数。
总结：nginx HTTP服务器的特色及优点：
        支持高并发：能支持几万并发连接（特别是静态小文件业务环境）
        资源消耗小：在3万并发连接下，开启10个Nginx线程消耗的内容不倒200MB。
	可以做HTTP反向代理及加速缓存，即负责均衡功能，内置对RS节点服务器健康检查功能，这相当于专业的Haproxy软件或LVS的功能。
	具备Squid等专业缓存软件等的缓存功能。
	支持异步网络I/O事件模型epoll（linux 2.6+）。
如何正确选择web服务器
        1）静态业务：若是高并发场景，尽量采用nginx或lighttpd，二者首选nginx
        2）动态业务：理论上采用nginx和Apache均可，建议选择nginx，为了避免相同业务的服务软件多样化，增加额外维护成本，动态业务可以由nginx兼做前端代理，再根据页面元素类型或目录，转发到后端响应的服务器进行处理
        3）具有静态业务又有动态业务：采用nginx
nginx的应用场合：
        提供服务
                提供静态服务（图片，视频服务），另一个lighttpd。并发：几万并发。
                提供动态服务，nginx+fastcgi方式运行php，jsp。动态并发：500-1500。
                        apache+php ，lighttpd+fcgi php
                提供反向代理（proxy）服务，或者成为负载均衡。
                        日PV2000w以下，并发1万以下，都可以直接用Nginx做反向代理。
                        haproxy，F5，A10	
                缓存服务。类似SQUID，VARNISH，ats。
nginx主要应用场景
        web服务器（首选）
                 静态文件，nginx首选
                动态文件，配合fastcgi支持php
        反向代理（负载均衡），1000-2000w PV ,并发 6000
        缓存（不是很多）
nginx支持虚拟主机
        一个server标签就是一个虚拟主机。
                基于域名的虚拟主机。通过域名来区分虚拟主机==>应用：外部网站 ***
                基于端口的虚拟主机。通过端口区分虚拟主机==>应用：公司内部网站，网站的后台。***
                基于IP的虚拟主机。几乎不用。不支持ifconfig别名，配置文件可以。
nginx的安装：
        拓展位：
                linuxz中软件安装方法：
                        1.rpm -ivh报名.rpm
                            有依赖问题，安装A，A需要先安装B。
                            缺点：不能定制。
                        2.yum安装自动解决rpm安装的依赖问题，安装更简单化。
                            优点：简单，易用，高效
                            缺点：不能定制。
                        3.编译（C语言源码--编译二进制等）
                            ./configure（配置）、make（编译）、make install（安装）
                            优点：可以定制
                            缺点：复杂、效率低。
                        定制化指定rpm包，搭建yum仓库，吧定制的rpm包放到yum仓库，进行yum安装。
                            优点：结合了2，3的优点
                            缺点：复杂。
                        有关rpm包定制及yum仓库搭建博客连接地址：
                        http://user.qzone.qq.com/49000448/blog/1426987479。
安装pcre
        安装pcre库是为了使Nginx支持具备URI重写功能的rewrite模块，几乎是企业应用必须的。
        pcre全称（Perl Compatible Regular Expressions），中文perl兼容正则表达式，官方站点为http://www.pcre.org/。
        HTTP rewrite module requires the PCRE library
        wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-6.repo
查看安装环境
        [root@lamp02 ~]# uname -r
        2.6.32-573.el6.x86_64
        [root@lamp02 ~]# uname -m
        x86_64
查看这两个软件有没有
        [root@lamp02 ~]# rpm -qa pcre pcre-devel
        pcre-7.8-7.el6.x86_64
安装pcre (只要是缺什么库，后面j都加-devel)
        [root@lamp02 ~]# yum install pcre pcre-devel -y
        检查安装是否成功
        [root@lamp02 ~]# rpm -qa pcre pcre-devel
        pcre-7.8-7.el6.x86_64
        pcre-devel-7.8-7.el6.x86_64
安装openssl-devel
        [root@lamp02 ~]# yum install openssl-devel -y
        检查是否安装成功
        [root@lamp02 ~]# rpm -qa openssl openssl-devel
        openssl-1.0.1e-42.el6_7.2.x86_64
        openssl-devel-1.0.1e-42.el6_7.2.x86_64
nginx编译安装
创建用户：
        [root@lamp02 nginx-1.6.3]# useradd nginx -s /sbin/nologin -M
        [root@lamp02 nginx-1.6.3]# id nginx  
        uid=503(nginx) gid=503(nginx) groups=503(nginx)
下载安装包
        [root@nfs-server tools]# wget -q http://nginx.org/download/nginx-1.6.3.tar.gz
        （在http://nginx.org/en/download.html查看网址，-q不提示。）
查看安装包
        [root@nfs-server tools]# ls nginx-1.6.3.tar.gz -lk
        -rw-r--r-- 1 root root 787 Apr  8  2015 nginx-1.6.3.tar.gz
解压
        tar zxvf nginx-1.6.3.tar.gz
        [root@web01 tools]# tar xf nginx-1.6.3.tar.gz
编译
        [root@nfs-server tools]# cd nginx-1.6.3
        [root@lamp02 nginx-1.6.3]# ./configure --prefix=/application/nginx-1.6.3 --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module
        
        --prefix=/application/nginx-1.6.3 ###把软件安装到哪里（设置安装路径）
        -user=nginx --group=nginx  ###用户是什么，组是什么（进程用户权限）
        --with-http_ssl_module     ###ssl模块（激活ssl功能）
        --with-http_stubs_module   ###状态模块，安装监控（查看连接数、活跃连接数）（激活状态信息。）
        [root@lamp02 nginx-1.6.3]# echo $?
        0
        上述操作主要是在这里生成一个文件
        [root@lamp02 nginx-1.6.3]# ls -lrt |tail -1
        -rw-r--r-- 1 root root    398 Feb  4 23:20 Makefile
接下来执行make && make install
        make ###编译过程不用理，看最后有没有报错就好。
        [root@lamp02 nginx-1.6.3]# make  ###通过makefile帮你编译这些程序。
        [root@lamp02 nginx-1.6.3]# make install   ###真正的安装过程。
        [root@lamp02 nginx-1.6.3]# echo $?
        0
创建软链接
        [root@lamp02 nginx-1.6.3]# cd ..
        [root@lamp02 tools]# ll /application/nginx-1.6.3/ -ld
        drwxr-xr-x 6 root root 4096 Feb  4 23:26 /application/nginx-1.6.3/
        [root@lamp02 tools]# ln -s /application/nginx-1.6.3/ /application/nginx
        [root@lamp02 tools]# ls -l /application/
        total 4
        lrwxrwxrwx 1 root root   25 Feb  4 23:34 nginx -> /application/nginx-1.6.3/
        drwxr-xr-x 6 root root 4096 Feb  4 23:26 nginx-1.6.3
        （目的是使使用方便）
小结：安装ngixnz步骤
        useradd nginx -s /sbin/nologin -M
        wget -q http://nginx.org/download/nginx-1.6.3.tar.gz
        tar zxf nginx-1.6.3.tar.gz
        cd nginx-1.6.3
        ./configure --prefix=/application/nginx-1.6.3 --user=nginx --group=nginx --with-http_ssl_module --with-http_stub_status_module
        make && make install
        cd ../
        ln -s /application/nginx-1.6.3/ /application/nginx

补充yum安装方法：注意yum后的路径与编译的不一致。
        wget -q http://mirrors.ustc.edu.cn/fedora/epel/6/x86_64/epel-release-6-8.noarch.rpm
        rpm -ivh epel-release-6-8.noarch.rpm
        yum install nginx -y
启动服务
        [root@lamp02 tools]# /application/nginx/sbin/nginx  
        [root@lamp02 tools]# ps -ef|grep nginx|grep -v grep       ###查看启动否
        root     10271     1  0 23:57 ?        00:00:00 nginx: master process /application/nginx/sbin/nginx
        nginx    10272 10271  0 23:57 ?        00:00:00 nginx: worker process     
        [root@lamp02 tools]# ss -lntup|grep nginx               ###查看服务端口
        tcp    LISTEN     0      128                    *:80                    *:*      users:(("nginx",10271,6),("nginx",10272,6))
本地curl检测
        本地可以curl访问
        [root@lamp02 tools]# curl 127.0.0.1
        有<title>Welcome to nginx!</title>表示成功了。
        也可以用浏览器访问以下。
        输入ip：192.168.37.129
        有Thank you for using nginx. 表示成功
浏览器输ip检测（注意关闭防火墙和selinux）
        win+r cmd 
        ping 192.168.37.129      ###通，则表示路是通的。
        telnet 192.168.37.129 80   ###不通，说明本地是好的，说明服务是开的。从客户端到linux不行，则是防火墙的问题。
        /etc/init.d/iptatbles stateus
        /etc/init.d/iptatbles stop
        /etc/init.d/iptatbles stop
至此nginx安装完成。
        
        
        
        
                        

                
